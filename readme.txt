HOW TO RUN THE PROGRAMSWe have implemented the three mechanisms with three different classes:Ñ the Boston Mechanism in a class named schoolChoiceBoston, and the matching is returned by the function boston();Ñ the Gale-Shapley Student Optimal Stable Mechanism (SOSM) in a class named schoolChoiceSOSM, and the matching is returned by the function galeShapley();Ñ the Top Trading Cycles Mechanism (TTCM) in a class named schoolChoiceTTCM, and the matching is returned by the function ttcm().Those three functions are methods that do not need an input. They return a double array matching of length m, such that, for each school i, matching[i] is an array of length capacity[i] that contains the students who have a seat in the school i. Initially, it contains only -1, which stands for an unoccupied seat.The three classes schoolChoiceBoston, schoolChoiceSOSM and schoolChoiceTTCM have the same five class attributes:Ñ an integer n: it is the number of students; we call them 0, 1, É, n;Ñ an integer m: it is the number of schools; we call them 0, 1, É, m; Ñ an array of integers capacity: its length is m; it contains the capacities of the schools;Ñ a double-array of integers priority: its length is mxn; priority[i] is a list of the m students sorted in a decreasing order of priority of the school i;Ñ a double-array of integers preference: its length is nxm; preference[j] is a list of the m schools sorted in a decreasing order of preference of the student j.Thus, to run the programs, one must:1) initialize an element of one of the three classes, using its constructor: it takes as an input the five variables mentioned above;2) apply the method that returns the array matching to this object;3) print the result without the unoccupied seats Ñ those who contain -1: this is implemented in the function printMatching of the class main.In the class Main, we have run the three algorithms with the inputs proposed in the fourth section. The results are the same that those obtained by running the algorithms by hand.